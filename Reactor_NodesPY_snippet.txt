class LoadFaceModel:
    @classmethod
    def INPUT_TYPES(s):
        return {
            "required": {
                "face_model": (get_model_names(get_facemodels),),
            },
            "optional": {
                "random_choice": ("BOOLEAN", {"default": False}),
            }
        }

    # Now includes a third output: prompt string
    RETURN_TYPES = ("FACE_MODEL", "STRING", "STRING")
    RETURN_NAMES = ("face_model", "face_model_name", "face_prompt")
    FUNCTION = "load_model"
    CATEGORY = "ðŸŒŒ ReActor"

    def load_model(self, face_model, random_choice):
        self.face_models_path = FACE_MODELS_PATH

        if random_choice:
            models_list = get_model_names(get_facemodels)
            if models_list:
                face_model = random.choice(models_list)
            else:
                face_model = "none"

        self.face_model = face_model
        if self.face_model != "none":
            face_model_path = os.path.join(self.face_models_path, self.face_model)

            # Load face model tensor
            out = load_face_model(face_model_path)

            # Extract the stripped file name (no extension)
            face_model_name = os.path.splitext(os.path.basename(face_model_path))[0].removesuffix("-MD")

            # Load prompt metadata (if available)
            with safe_open(face_model_path, framework="pt") as f:
                metadata = f.metadata() or {}
                face_prompt = metadata.get("prompt", "")
        else:
            out = None
            face_model_name = ""
            face_prompt = ""

        return (out, face_model_name, face_prompt)